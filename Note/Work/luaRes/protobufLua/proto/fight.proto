package fightV2;

option java_package = "com.sh.game.proto";
option java_outer_classname = "FightProto";

message BufferInfo {
  optional int32 bufferId = 1; //唯一id
  optional int32 bufferConfigId = 2; //配置id
  optional int64 addTime = 3;
  optional int64 totalTime = 4;//持续时间,毫秒数
  optional int64 roleId = 5;
  optional int32 bufferValue = 6;
  optional int32 bufferValue2 = 7;
  optional int32 data = 8; //buff符加属性，对于骑术buff对应马的模型id
  repeated PlayerAttribute addValue = 9;//buff添加的属性ID和对应的值
}

message PlayerAttribute {
  required int32 type = 1; //属性类型
  required int64 num = 2; //属性值
}

message HurtTarget {
  optional int64 targetId = 1;
  optional int64 hp = 2;//当前血量
  optional int64 showHurt = 3;//显示伤害, 总伤害包括神圣伤害，嗜血伤害
  optional int32 inner = 4;//当前内功
  repeated int32 bufferList = 5;//增加的 buff id 列表
  optional int32 specAtt = 6;//触发的特效
  optional int32 hurtType = 7;//伤害类型
  optional int32 effectType = 8;//攻击类型, 1伤害, 2质量, 3空
  optional bool isDodge = 9; //是否闪避
  optional bool isCritical = 10; //是否暴击
  optional int32 x = 11;
  optional int32 y = 12;
  optional int32 servantReduceHurt = 13; //灵兽合体抵消伤害
  optional int32 burnMp = 14; //燃烧 mp
  optional int32 holyHurt = 15; // 神圣伤害
  optional int32 targetX = 16; // 受技能影响时的服务端位置
  optional int32 targetY = 17;
  optional int32 multipleHolyHurt = 18; // 多倍神圣伤害
  optional int32 deterHurt = 19;//官印威慑伤害
  optional int64 breakShield = 20; // 减少的护盾值
  optional int32 penetrateHurt = 21; // 暗器穿透伤害
  optional int64 guardDamage = 22; // 守护抵消伤害
  optional bool isSoulAttack = 23; //是否灵魂一击
  optional bool isBack = 24; //是否反击伤害
  optional bool isShield = 25; //是否神盾护体
  optional int64 shixue = 26;//嗜血伤害
}

//请求攻击
message FightRequest {
  required int32 skillId = 1;
  optional int64 targetId = 2;
  optional int32 x = 3;
  optional int32 y = 4;
  optional int32 useBufferId = 5;
  optional int32 sign = 6; //自增量标记
}

//返回攻击
message ResFightResult {
  required int32 skillId = 1;
  optional int64 attackerId = 2;//攻击者
  optional int64 targetId = 3;//被攻击者
  optional int32 x = 4;
  optional int32 y = 5;
  repeated HurtTarget hurtList = 6;//受击列表
  optional int32 mp = 7;//当前魔法值
  optional int32 skillExp = 8;
  optional int32 useBufferId = 9;
  optional int32 farX = 10; //前面有撞不动的对象, 要退后, farX, farY 是到达的最远格, 从那里退后到 x, y
  optional int32 farY = 11;
  optional int32 mapId = 12;
}

//血量蓝量发生变化（用于单独的通知血量，比如说buffer伤害等等）
message ResHpMpChange {
  required int64 lid = 1;
  optional int64 hp = 2;//当前血量
  optional int32 mp = 3;//当前蓝量
  optional int64 maxHp = 4;
  optional int32 maxMp = 5;
}

//死亡消息（用于单独的通知对象的死亡,比如说buffer伤害等等）
message ResObjectDie {
  required int64 lid = 1;
  required int64 killerId = 2;//击杀者id
}

//同步玩家总血量的百分比
message ResPlayerTotalHpPercnet {
  required bytes percent = 1;//总血量的百分比
}

//内功发生变化（用于单独的通知内功，内功回复）
message ResInnerChange {
  required int64 lid = 1;
  optional int64 inner = 2;//当前内功
}

//返回守护攻击
message ResShouHuAttack {
  required int32 shouhuId = 1;//守护配置id
  required int64 ownerId = 2;//归属者id
  optional int32 buffId = 3;//触发buffId
}

//同步玩家总魔法值的百分比
message ResPlayerTotalMagicPercnet {
  required bytes percent = 1;//总魔法值的百分比
}

//返回禁疗消息
message ResBanCure {
  required int64 targetId = 1;
}

message SkillMoveInfo{
  required int64 attackId = 1; //攻击者
  optional int32 type = 2;//1：抗拒 2：野蛮
  repeated SkillMove moveInfo = 3;//改变列表
}

//技能位移返回
message SkillMove {
  required int64 targetId = 1;
  required int32 x = 2;
  required int32 y = 3;
}

enum PropertyType {
  maxHp = 1;
  maxMp = 2;
  innerPowerMax = 3;
  phyAttackMin = 4;
  phyAttackMax = 5;
  magicAttackMin = 6;
  magicAttackMax = 7;
  taoAttackMin = 8;
  taoAttackMax = 9;
  phyDefMin = 10;
  phyDefMax = 11;
  magicDefMin = 12;
  magicDefMax = 13;
  critical = 14;
  criticalDamage = 15;
  accurate = 16;
  dodge = 17;
  heathRecover = 18;
  magicRecover = 19;
  innerPowerRecover = 20;
  luck = 21;
  resistanceCrit = 22;
  hurtAdd = 23;
  relief = 24;
  innerRelief = 25;
  holyAttack = 26;
  attackSpeed = 27;
  pkAtt = 28;
  pkDef = 29;
  nbValue = 30;
}
//使用药品直接回血
message ResMedicineHpMpChange {
  optional int64 id = 1;
  optional int64 hp = 2;
  optional int32 mp = 3;
  optional int64 addHp = 4;
  optional int32 addMp = 5;
}
//灯芯秒杀提示
message ResLampCoreSeckill {
  optional int64 id = 1; //被秒杀的玩家ID
  optional int64 hp = 2; //秒杀的血量
}
